# Copyright 2022 The Centipede Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load(":build_defs.bzl", "centipede_test_target", "centipede_test_target_sancov")

package(default_visibility = ["//visibility:public"])

licenses(["notice"])

exports_files(["centipede_main_test.sh"])

################################################################################
#                        General-purpose testing utilities
################################################################################

cc_library(
    name = "test_util",
    srcs = ["test_util.cc"],
    hdrs = ["test_util.h"],
    deps = [
        "@centipede//:logging",
    ],
)

################################################################################
#                         Targets for fuzz tests
################################################################################

# Example of using the bazel transitions to build the fuzz target binary
# with the custom flags required to run under Centipede.
# re2_fuzzer is chosen as an arbitrary third_party fuzz target.
centipede_test_target_sancov(
    name = "target_example",
    fuzz_target = "//third_party/re2/fuzzing:re2_fuzzer",
)

centipede_test_target(
    name = "abort_fuzz_target",
)

# Transition of :abort_fuzz_target.
centipede_test_target_sancov(
    name = "abort_fuzz_target_sancov",
    fuzz_target = "abort_fuzz_target",
)

centipede_test_target(
    name = "empty_fuzz_target",
)

# Transition of :empty_fuzz_target.
centipede_test_target_sancov(
    name = "empty_fuzz_target_sancov",
    fuzz_target = "empty_fuzz_target",
)

# This fuzz target is not currently used by any automated tests
# and is here for manual tests only.
centipede_test_target(
    name = "multi_sanitizer_test",
)

# Simple fuzz target used for testing.
centipede_test_target(
    name = "test_fuzz_target",
)

# Transition of :test_fuzz_target.
centipede_test_target_sancov(
    name = "test_fuzz_target_sancov",
    fuzz_target = "test_fuzz_target",
)

# Target instrumented with -fsanitize-coverage=trace-pc.
centipede_test_target_sancov(
    name = "test_fuzz_target_trace_pc",
    fuzz_target = "test_fuzz_target",
    sancov = "trace-pc",
)

centipede_test_target(
    name = "threaded_fuzz_target",
)

# Test fuzz target with lots of threads.
centipede_test_target_sancov(
    name = "threaded_fuzz_target_sancov",
    fuzz_target = "threaded_fuzz_target",
    sancov = "trace-pc-guard",  # Only this instrumentation to ensure it works.
)

################################################################################
#                            Helper binaries
################################################################################

sh_binary(
    name = "test_input_filter",
    srcs = ["test_input_filter.sh"],
)

################################################################################
#                              Fuzz tests
################################################################################

cc_test(
    name = "util_test",
    srcs = ["util_test.cc"],
    deps = [
        "@centipede//:defs",
        "@centipede//:feature",
        "@centipede//:logging",
        "@centipede//:util",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "blob_file_test",
    srcs = ["blob_file_test.cc"],
    deps = [
        ":test_util",
        "@centipede//:blob_file",
        "@centipede//:util",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/types:span",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "shared_memory_blob_sequence_test",
    srcs = ["shared_memory_blob_sequence_test.cc"],
    deps = [
        "@centipede//:shared_memory_blob_sequence",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "execution_result_test",
    srcs = ["execution_result_test.cc"],
    deps = [
        "@centipede//:execution_result",
        "@centipede//:feature",
        "@centipede//:shared_memory_blob_sequence",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "byte_array_mutator_test",
    srcs = ["byte_array_mutator_test.cc"],
    deps = [
        "@centipede//:byte_array_mutator",
        "@centipede//:defs",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "coverage_test",
    srcs = ["coverage_test.cc"],
    data = [
        ":test_fuzz_target_sancov",
        ":test_fuzz_target_trace_pc",
        ":threaded_fuzz_target_sancov",
    ],
    deps = [
        ":test_util",
        "@centipede//:centipede_interface",
        "@centipede//:coverage",
        "@centipede//:defs",
        "@centipede//:environment",
        "@centipede//:execution_result",
        "@centipede//:feature",
        "@centipede//:logging",
        "@centipede//:util",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "feature_test",
    srcs = ["feature_test.cc"],
    deps = [
        "@centipede//:feature",
        "@centipede//:logging",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "corpus_test",
    srcs = ["corpus_test.cc"],
    deps = [
        "@centipede//:corpus",
        "@centipede//:coverage",
        "@centipede//:defs",
        "@centipede//:feature",
        "@centipede//:util",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_binary(
    name = "command_test_helper",
    srcs = ["command_test_helper.cc"],
    deps = ["@centipede//:runner_fork_server"],
)

cc_test(
    name = "command_test",
    srcs = ["command_test.cc"],
    data = [":command_test_helper"],
    deps = [
        ":test_util",
        "@centipede//:command",
        "@centipede//:logging",
        "@centipede//:util",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "centipede_test",
    srcs = ["centipede_test.cc"],
    data = [
        ":abort_fuzz_target_sancov",
        ":test_fuzz_target_sancov",
        ":test_input_filter",
    ],
    deps = [
        ":test_util",
        "@centipede//:blob_file",
        "@centipede//:centipede_callbacks",
        "@centipede//:centipede_interface",
        "@centipede//:defs",
        "@centipede//:environment",
        "@centipede//:execution_result",
        "@centipede//:feature",
        "@centipede//:logging",
        "@centipede//:shard_reader",
        "@centipede//:util",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
    ],
)

# Runs common Centipede scenarios with local files.
sh_test(
    name = "centipede_main_test",
    srcs = ["centipede_main_test.sh"],
    data = [
        ":abort_fuzz_target_sancov",
        ":target_example",
        ":test_fuzz_target_sancov",
        "@centipede//:centipede_main",
    ],
)

# Runs common Centipede scenarios in multiple threads.
sh_test(
    name = "centipede_threaded_test",
    srcs = ["centipede_threaded_test.sh"],
    data = [
        ":target_example",
        "@centipede//:centipede_main",
    ],
)

# Test for fuzz_target_runner.
sh_test(
    name = "runner_test",
    srcs = ["runner_test.sh"],
    data = [
        ":test_fuzz_target_sancov",
    ],
)

sh_test(
    name = "instrumentation_test",
    srcs = ["instrumentation_test.sh"],
    data = [
        ":empty_fuzz_target_sancov",
    ],
)
